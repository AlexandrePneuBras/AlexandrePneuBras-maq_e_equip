# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    layout="wide",
    page_title="Dashboard An√°lise Manuten√ß√£o de M√°q e Equip | Real vs Or√ßado",
    page_icon="üìä"
)

st.title('üìä An√°lise Manuten√ß√£o de M√°quinas e Equipamentos - Real vs Or√ßado')

# --- Carregamento e Pr√©-processamento dos Dados ---
@st.cache_data
def load_and_preprocess_data(filepath):
    try:
        df = pd.read_excel(filepath)

        # Converte 'M√™s' para datetime e extrai ano/m√™s
        df['M√™s'] = pd.to_datetime(df['M√™s'], errors='coerce')
        df.dropna(subset=['M√™s'], inplace=True)
        
        df['Ano'] = df['M√™s'].dt.year
        df['M√™s_Num'] = df['M√™s'].dt.month # M√™s num√©rico para ordena√ß√£o
        df['M√™s_Ano'] = df['M√™s'].dt.strftime('%Y-%m')
        df['Nome_M√™s'] = df['M√™s'].dt.strftime('%b')  # Abrevia√ß√£o do m√™s (Jan, Fev, etc)
        
        # Garante que temos apenas dados de 2024 e 2025
        df = df[df['Ano'].isin([2024, 2025])]
        
        # Converte colunas num√©ricas
        for col in ['Real', 'Or√ßado']:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        # Calcula varia√ß√£o e % varia√ß√£o
        df['Varia√ß√£o'] = df['Real'] - df['Or√ßado']
        df['% Varia√ß√£o'] = (df['Varia√ß√£o'] / df['Or√ßado']).replace([np.inf, -np.inf], np.nan).fillna(0) * 100
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar ou processar os dados: {e}")
        return pd.DataFrame()

# Define o caminho do arquivo de dados
# IMPORTANTE: Substitua pelo caminho real do seu arquivo Excel.
# Por exemplo, se estiver no mesmo diret√≥rio do seu script: filepath = "maqequip.xlsx"
filepath = "https://raw.githubusercontent.com/AlexandrePneuBras/AlexandrePneuBras-maq_e_equip/refs/heads/main/maqequip.xlsx"
df = load_and_preprocess_data(filepath)

if not df.empty:
    # --- Inicializa o Estado da Sess√£o para Filtros ---
    # Isso ajuda a gerenciar a funcionalidade "Selecionar Todos" e "Limpar Sele√ß√£o"
    if 'selected_years' not in st.session_state:
        st.session_state.selected_years = sorted(df['Ano'].unique())
    if 'selected_branches' not in st.session_state:
        st.session_state.selected_branches = sorted(df['Cod. Filial'].astype(str).unique())
    if 'selected_segments' not in st.session_state:
        st.session_state.selected_segments = sorted(df['Segmento'].unique())
    if 'selected_months' not in st.session_state:
        # Obt√©m meses √∫nicos e os ordena pela ordem num√©rica
        unique_months_df = df[['M√™s_Num', 'Nome_M√™s']].drop_duplicates().sort_values('M√™s_Num')
        st.session_state.selected_months = list(unique_months_df['Nome_M√™s'])
    if 'value_type_selection' not in st.session_state:
        st.session_state.value_type_selection = "Ambos" # Padr√£o para "Ambos"

    # --- Filtros da Barra Lateral ---
    st.sidebar.header("Filtros de An√°lise üîé")
    st.sidebar.markdown("Use os filtros abaixo para refinar os dados exibidos no dashboard.")

    # Fun√ß√£o auxiliar para criar filtro com bot√µes de selecionar/limpar tudo
    def create_filter_with_buttons(label, options, session_state_key):
        st.sidebar.subheader(f"Filtrar por {label}")
        col_select_all, col_clear_all = st.sidebar.columns(2)

        with col_select_all:
            if st.button(f"Selecionar Todos", key=f"select_all_{session_state_key}"):
                st.session_state[session_state_key] = options
                st.rerun()
        with col_clear_all:
            if st.button(f"Limpar Sele√ß√£o", key=f"clear_all_{session_state_key}"):
                st.session_state[session_state_key] = []
                st.rerun()

        current_selection = st.sidebar.multiselect(
            f"Escolha os {label.lower()}:",
            options=options,
            default=st.session_state[session_state_key],
            key=session_state_key
        )
        return current_selection

    # Filtro de Tipo de Valor (Real, Or√ßado, Ambos)
    st.sidebar.markdown("---")
    st.sidebar.subheader("Tipo de Valor para Gr√°ficos üìä")
    value_type_selection = st.sidebar.radio(
        "Selecione o tipo de valor para visualiza√ß√£o:",
        ("Ambos", "Real", "Or√ßado"),
        key='value_type_selection',
        help="Escolha se deseja ver 'Real', 'Or√ßado' ou 'Ambos' nos gr√°ficos de compara√ß√£o."
    )

    # Filtro de Ano
    st.sidebar.markdown("---")
    all_years = sorted(df['Ano'].unique())
    selected_years = create_filter_with_buttons("Ano", all_years, 'selected_years')
    
    # Filtro de M√™s
    st.sidebar.markdown("---")
    unique_months_df = df[['M√™s_Num', 'Nome_M√™s']].drop_duplicates().sort_values('M√™s_Num')
    all_months = list(unique_months_df['Nome_M√™s'])
    selected_months = create_filter_with_buttons("M√™s", all_months, 'selected_months')

    # Filtro de Filial
    st.sidebar.markdown("---")
    all_branches = sorted(df['Cod. Filial'].astype(str).unique())
    selected_branches = create_filter_with_buttons("Filiais", all_branches, 'selected_branches')
    
    # Filtro de Segmento
    st.sidebar.markdown("---")
    all_segments = sorted(df['Segmento'].unique())
    selected_segments = create_filter_with_buttons("Segmentos", all_segments, 'selected_segments')

    # Aplica os filtros
    filtered_df = df[
        df['Ano'].isin(selected_years) &
        df['Nome_M√™s'].isin(selected_months) & # Aplica filtro de m√™s
        df['Cod. Filial'].astype(str).isin(selected_branches) &
        df['Segmento'].isin(selected_segments)
    ]

    # --- M√©tricas Resumo ---
    st.markdown("---")
    st.header("Indicadores Chave üìà")
    
    # Calcula os totais
    total_real = filtered_df['Real'].sum()
    total_orcado = filtered_df['Or√ßado'].sum()
    variacao_total = total_real - total_orcado
    perc_variacao = (variacao_total / total_orcado) * 100 if total_orcado != 0 else 0
    
    # Cria colunas para as m√©tricas
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Real", f"R$ {total_real:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
    with col2:
        st.metric("Total Or√ßado", f"R$ {total_orcado:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
    with col3:
        st.metric("Varia√ß√£o Total", 
                  f"R$ {variacao_total:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                  f"{perc_variacao:.2f}%")

    # --- Comparativo Anual ---
    st.markdown("---")
    st.header("Comparativo Anual: Real vs Or√ßado üìÜ")
    
    if len(selected_years) > 0:
        # Agrupa por ano
        yearly_comparison = filtered_df.groupby('Ano')[['Real', 'Or√ßado']].sum().reset_index()
        
        # Derrete para melhor plotagem com base na sele√ß√£o do tipo de valor
        if value_type_selection == "Ambos":
            yearly_melted = yearly_comparison.melt(id_vars='Ano', 
                                                   value_vars=['Real', 'Or√ßado'],
                                                   var_name='Tipo', 
                                                   value_name='Valor')
            # Cria uma coluna combinada 'Tipo_Ano' para colora√ß√£o distinta
            yearly_melted['Tipo_Ano'] = yearly_melted['Tipo'] + ' ' + yearly_melted['Ano'].astype(str)
        elif value_type_selection == "Real":
            yearly_melted = yearly_comparison[['Ano', 'Real']].rename(columns={'Real': 'Valor'})
            yearly_melted['Tipo'] = 'Real'
            yearly_melted['Tipo_Ano'] = yearly_melted['Tipo'] + ' ' + yearly_melted['Ano'].astype(str)
        else: # value_type_selection == "Or√ßado"
            yearly_melted = yearly_comparison[['Ano', 'Or√ßado']].rename(columns={'Or√ßado': 'Valor'})
            yearly_melted['Tipo'] = 'Or√ßado'
            yearly_melted['Tipo_Ano'] = yearly_melted['Tipo'] + ' ' + yearly_melted['Ano'].astype(str)

        # Define cores personalizadas para cada combina√ß√£o de Tipo e Ano
        custom_colors = {
            'Real 2024': '#1f77b4',  # Azul para Real 2024
            'Or√ßado 2024': '#aec7e8', # Azul mais claro para Or√ßado 2024
            'Real 2025': '#2ca02c',  # Verde para Real 2025
            'Or√ßado 2025': '#98df8a'  # Verde mais claro para Or√ßado 2025
        }
        # Filtra o mapa de cores para incluir apenas as chaves realmente presentes nos dados
        filtered_colors = {k: v for k, v in custom_colors.items() if k in yearly_melted['Tipo_Ano'].unique()}

        # Cria gr√°fico de barras
        fig_yearly = px.bar(yearly_melted,
                            x='Ano',
                            y='Valor',
                            color='Tipo_Ano', # Usa a nova coluna combinada para colora√ß√£o
                            barmode='group',
                            text='Valor',
                            labels={'Valor': 'Valor (R$)', 'Ano': 'Ano', 'Tipo_Ano': 'Tipo & Ano'},
                            height=500,
                            color_discrete_map=filtered_colors) # Aplica as cores personalizadas filtradas
        
        # Formata valores e layout
        fig_yearly.update_traces(texttemplate='R$ %{value:,.2f}', textposition='outside')
        fig_yearly.update_layout(hovermode='x unified',
                                 yaxis_tickprefix='R$ ',
                                 yaxis_tickformat=',.2f',
                                 legend_title_text='')
        st.plotly_chart(fig_yearly, use_container_width=True)
        
        # Comparativo Mensal
        st.subheader("Comparativo Mensal: Real vs Or√ßado üìà")
        
        # Agrupa por m√™s-ano
        monthly_comparison = filtered_df.groupby(['Ano', 'M√™s_Num', 'M√™s_Ano', 'Nome_M√™s'])[['Real', 'Or√ßado']].sum().reset_index()
        monthly_comparison = monthly_comparison.sort_values(['Ano', 'M√™s_Num'])
        
        # Cria gr√°fico de linhas
        fig_monthly = go.Figure()
        
        # Adiciona traces para cada ano com base na sele√ß√£o do tipo de valor
        for year in selected_years:
            year_data = monthly_comparison[monthly_comparison['Ano'] == year]
            
            # Usa cores espec√≠ficas com base no ano para Real e Or√ßado
            color_real = custom_colors.get(f'Real {year}', '#1f77b4') # Padr√£o para azul se n√£o encontrado
            color_orcado = custom_colors.get(f'Or√ßado {year}', '#ff7f0e') # Padr√£o para laranja se n√£o encontrado

            if value_type_selection in ["Ambos", "Real"]:
                fig_monthly.add_trace(go.Scatter(
                    x=year_data['Nome_M√™s'],
                    y=year_data['Real'],
                    name=f'Real {year}',
                    mode='lines+markers',
                    line=dict(width=3, color=color_real), 
                    hovertemplate='<b>%{x}</b><br>Real: R$ %{y:,.2f}<extra></extra>'
                ))
            
            if value_type_selection in ["Ambos", "Or√ßado"]:
                fig_monthly.add_trace(go.Scatter(
                    x=year_data['Nome_M√™s'],
                    y=year_data['Or√ßado'],
                    name=f'Or√ßado {year}',
                    mode='lines+markers',
                    line=dict(dash='dot', width=3, color=color_orcado), 
                    hovertemplate='<b>%{x}</b><br>Or√ßado: R$ %{y:,.2f}<extra></extra>'
                ))
        
        # Atualiza layout
        fig_monthly.update_layout(
            title='Evolu√ß√£o Mensal: Real vs Or√ßado',
            xaxis_title='M√™s',
            yaxis_title='Valor (R$)',
            hovermode='x unified',
            yaxis_tickprefix='R$ ',
            yaxis_tickformat=',.2f',
            legend_title_text=''
        )
        st.plotly_chart(fig_monthly, use_container_width=True)
        
        # An√°lise de Varia√ß√£o
        st.subheader("An√°lise de Varia√ß√£o (Real - Or√ßado) üìä")
        
        # Calcula varia√ß√£o mensal
        monthly_comparison['Varia√ß√£o'] = monthly_comparison['Real'] - monthly_comparison['Or√ßado']
        # Recalcula % Varia√ß√£o com base nos dados agrupados mensalmente
        monthly_comparison['% Varia√ß√£o'] = (monthly_comparison['Varia√ß√£o'] / monthly_comparison['Or√ßado']).replace([np.inf, -np.inf], np.nan).fillna(0) * 100
        
        # Cria gr√°fico de varia√ß√£o (sempre mostra varia√ß√£o, n√£o afetado pela sele√ß√£o de tipo de valor)
        fig_variance = go.Figure()

        # Define cores espec√≠ficas para varia√ß√£o com base no ano e sinal
        variance_colors_map = {
            '2024_Pos': '#33a02c', # Verde mais escuro para positivo 2024
            '2024_Neg': '#e31a1c', # Vermelho mais escuro para negativo 2024
            '2025_Pos': '#b2df8a', # Verde mais claro para positivo 2025
            '2025_Neg': '#f9c8c9'  # Vermelho mais claro para negativo 2025
        }
        
        for year in selected_years:
            year_data = monthly_comparison[monthly_comparison['Ano'] == year]
            
            # Determina cores para as barras com base no ano e sinal de varia√ß√£o
            bar_colors = []
            for val in year_data['Varia√ß√£o']:
                if year == 2024:
                    bar_colors.append(variance_colors_map['2024_Pos'] if val >= 0 else variance_colors_map['2024_Neg'])
                elif year == 2025:
                    bar_colors.append(variance_colors_map['2025_Pos'] if val >= 0 else variance_colors_map['2025_Neg'])
                else: # Fallback para qualquer outro ano, embora filtrado para 2024/2025
                    bar_colors.append('green' if val >= 0 else 'red')
            
            fig_variance.add_trace(go.Bar(
                x=year_data['Nome_M√™s'],
                y=year_data['Varia√ß√£o'],
                name=str(year),
                text=year_data['% Varia√ß√£o'].apply(lambda x: f'{x:.1f}%'),
                textposition='outside',
                hovertemplate='<b>%{x}</b><br>Varia√ß√£o: R$ %{y:,.2f}<br>% Varia√ß√£o: %{text}<extra></extra>',
                marker_color=bar_colors # Aplica as cores espec√≠ficas do ano
            ))
        
        fig_variance.update_layout(
            barmode='group',
            title='Varia√ß√£o Mensal: Real vs Or√ßado',
            xaxis_title='M√™s',
            yaxis_title='Varia√ß√£o (R$)',
            hovermode='x unified',
            yaxis_tickprefix='R$ ',
            yaxis_tickformat=',.2f',
            height=600, # Aumenta a altura para evitar que os r√≥tulos sejam cortados
            margin=dict(t=50) # Adiciona margem superior
        )
        st.plotly_chart(fig_variance, use_container_width=True)
        
    else:
        st.warning("Selecione pelo menos um ano para visualizar as compara√ß√µes.")

    # --- Top Filiais por Custo ---
    st.markdown("---")
    st.header("Top Filiais com Maiores Custos por Ano üí∞")

    if len(selected_years) > 0:
        # Entrada do usu√°rio para o n√∫mero de top filiais
        num_top_branches = st.slider(
            "Selecione a quantidade de top filiais para exibir:",
            min_value=1,
            max_value=min(len(df['Cod. Filial'].unique()), 100), # M√°ximo de 10 ou o n√∫mero de filiais √∫nicas se for menor
            value=min(5, len(df['Cod. Filial'].unique())) # Padr√£o para 5 ou menos se n√£o houver filiais suficientes
        )

        top_branches_data = pd.DataFrame()
        for year in selected_years:
            # Filtra dados para o ano atual
            df_year = filtered_df[filtered_df['Ano'] == year]
            
            # Agrupa por 'Cod. Filial' e soma 'Real' e 'Or√ßado'
            branch_costs = df_year.groupby('Cod. Filial')[['Real', 'Or√ßado']].sum().reset_index()
            
            # Ordena pelo custo 'Real' em ordem decrescente e pega as N principais
            branch_costs = branch_costs.sort_values(by='Real', ascending=False).head(num_top_branches)
            
            # Derrete os dados para plotagem
            if value_type_selection == "Ambos":
                melted_branch_costs = branch_costs.melt(id_vars='Cod. Filial',
                                                        value_vars=['Real', 'Or√ßado'],
                                                        var_name='Tipo',
                                                        value_name='Valor')
            elif value_type_selection == "Real":
                melted_branch_costs = branch_costs[['Cod. Filial', 'Real']].rename(columns={'Real': 'Valor'})
                melted_branch_costs['Tipo'] = 'Real'
            else: # "Or√ßado"
                melted_branch_costs = branch_costs[['Cod. Filial', 'Or√ßado']].rename(columns={'Or√ßado': 'Valor'})
                melted_branch_costs['Tipo'] = 'Or√ßado'

            melted_branch_costs['Ano'] = year
            top_branches_data = pd.concat([top_branches_data, melted_branch_costs])
        
        if not top_branches_data.empty:
            # Cria uma coluna combinada 'Tipo_Ano' para colora√ß√£o distinta
            top_branches_data['Tipo_Ano'] = top_branches_data['Tipo'] + ' ' + top_branches_data['Ano'].astype(str)

            fig_top_branches = px.bar(top_branches_data,
                                        x='Cod. Filial',
                                        y='Valor',
                                        color='Tipo_Ano',
                                        barmode='group',
                                        facet_col='Ano', # Gr√°ficos separados para cada ano
                                        facet_col_wrap=2,
                                        text='Valor',
                                        labels={'Valor': 'Valor (R$)', 'Cod. Filial': 'C√≥digo da Filial', 'Tipo_Ano': 'Tipo & Ano'},
                                        height=600,
                                        color_discrete_map=custom_colors) # Usa as mesmas cores personalizadas

            fig_top_branches.update_traces(texttemplate='R$ %{value:,.2f}', textposition='outside')
            fig_top_branches.update_layout(hovermode='x unified',
                                            yaxis_tickprefix='R$ ',
                                            yaxis_tickformat=',.2f',
                                            legend_title_text='')
            fig_top_branches.for_each_annotation(lambda a: a.update(text=a.text.replace("Ano=", "Ano: ")))
            st.plotly_chart(fig_top_branches, use_container_width=True)
        else:
            st.info("Nenhum dado de top filiais encontrado para os filtros selecionados.")
    else:
        st.warning("Selecione pelo menos um ano para visualizar as top filiais com maiores custos.")

    # --- Vis√£o Detalhada dos Dados - Tabela Din√¢mica Din√¢mica ---
    st.markdown("---")
    st.header("Dados Detalhados (Comparativo Cumulativo por M√™s) üìö")
    
    if not filtered_df.empty:
        # Agrupa por Filial, Segmento, Ano, M√™s_Num, Nome_M√™s e Hist√≥rico
        # Calcula a soma de Real e Or√ßado para cada m√™s
        monthly_agg = filtered_df.groupby(['Cod. Filial', 'Segmento', 'Ano', 'M√™s_Num', 'Nome_M√™s', 'Hist√≥rico'])[['Real', 'Or√ßado']].sum().reset_index()
        
        # Ordena para garantir o c√°lculo cumulativo correto
        monthly_agg = monthly_agg.sort_values(by=['Cod. Filial', 'Segmento', 'Hist√≥rico', 'Ano', 'M√™s_Num'])
        
        # Calcula as somas cumulativas para Real e Or√ßado dentro de cada Filial, Segmento, Hist√≥rico e Ano
        monthly_agg['Real_Acumulado'] = monthly_agg.groupby(['Cod. Filial', 'Segmento', 'Hist√≥rico', 'Ano'])['Real'].cumsum()
        monthly_agg['Or√ßado_Acumulado'] = monthly_agg.groupby(['Cod. Filial', 'Segmento', 'Hist√≥rico', 'Ano'])['Or√ßado'].cumsum()
        
        # Calcula a varia√ß√£o cumulativa e % varia√ß√£o
        monthly_agg['Varia√ß√£o_Acumulada'] = monthly_agg['Real_Acumulado'] - monthly_agg['Or√ßado_Acumulado']
        monthly_agg['% Varia√ß√£o_Acumulada'] = (monthly_agg['Varia√ß√£o_Acumulada'] / monthly_agg['Or√ßado_Acumulado']).replace([np.inf, -np.inf], np.nan).fillna(0) * 100
        
        # Nova estrutura de tabela din√¢mica para compara√ß√£o ano a ano
        # Pivota a tabela para ter os anos como colunas para compara√ß√£o, incluindo 'Hist√≥rico' no √≠ndice
        pivot_table_comparison = monthly_agg.pivot_table(
            index=['Cod. Filial', 'Segmento', 'Hist√≥rico', 'Nome_M√™s', 'M√™s_Num'], # Inclui M√™s_Num para ordena√ß√£o
            columns='Ano',
            values=['Real_Acumulado', 'Or√ßado_Acumulado', 'Varia√ß√£o_Acumulada', '% Varia√ß√£o_Acumulada']
        )

        # Acha os multi-n√≠veis das colunas
        pivot_table_comparison.columns = [f"{col[0].replace('_Acumulado', '')} {col[1]}" for col in pivot_table_comparison.columns]
        
        # Reseta o √≠ndice para tornar 'Cod. Filial', 'Segmento', 'Hist√≥rico', 'Nome_M√™s' colunas normais
        pivot_table_comparison = pivot_table_comparison.reset_index()

        # Ordena por Filial, Segmento, Hist√≥rico e M√™s_Num para garantir a ordem cronol√≥gica dos meses
        pivot_table_comparison = pivot_table_comparison.sort_values(by=['Cod. Filial', 'Segmento', 'Hist√≥rico', 'M√™s_Num'])

        # Remove M√™s_Num, pois n√£o √© mais necess√°rio para exibi√ß√£o
        pivot_table_comparison = pivot_table_comparison.drop(columns=['M√™s_Num'])

        # Formata colunas num√©ricas para exibi√ß√£o
        for col in pivot_table_comparison.columns:
            if 'Real' in col or 'Or√ßado' in col or 'Varia√ß√£o' in col:
                if pd.api.types.is_numeric_dtype(pivot_table_comparison[col]):
                    pivot_table_comparison[col] = pivot_table_comparison[col].fillna(0).apply(lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
                    pivot_table_comparison[col] = pivot_table_comparison[col].replace("R$ 0,00", "-")
            elif '% Varia√ß√£o' in col:
                if pd.api.types.is_numeric_dtype(pivot_table_comparison[col]):
                    pivot_table_comparison[col] = pivot_table_comparison[col].fillna(0).apply(lambda x: f"{x:,.2f}%".replace(",", "X").replace(".", ",").replace("X", "."))
                    pivot_table_comparison[col] = pivot_table_comparison[col].replace("0,00%", "-")

        st.dataframe(pivot_table_comparison, use_container_width=True)
    else:
        st.info("Nenhum dado encontrado para os filtros selecionados para a tabela detalhada.")

else:
    st.error("N√£o foi poss√≠vel carregar os dados. Verifique o arquivo e o caminho.")
